<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<head>
		<name>Handlebars</name>
		<charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@":]]></charsintokens>
		<charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@</="!]]></charsincompletion>
		<folding toplevel="3" />
	</head>
	<states>
		<default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HTML" scope="meta.default">
			<import mode="XML" keywords-only="yes" />
			<state id="Handlebars" usesymbolsfrommode="Handlebars" useautocompletefrommode="Handlebars" foldable="no" scope="markup.processing.languageswitch">
				<begin>
					<regex>(?:{{)</regex>
					<autoend>}}</autoend>
				</begin>
				<end>
					<regex>(?:(?:[=}]?)}})</regex>
				</end>
				<keywords id="Handlebars Variables" useforautocomplete="no" scope="markup.tag.attribute.name">
					<!-- <regex>{{(?:[^\^#/!>&lt;=%@])(.*?)}}</regex> -->
					<regex>{{(?:{?)([^\^#/!>&lt;=%@].*?)}}</regex>
				</keywords>
				<keywords id="Handlebars Sections" useforautocomplete="no" scope="keyword.control">
					<regex>{{[#/\^](.*?)}}</regex>
				</keywords>
				<keywords id="Handlebars Comments" useforautocomplete="no" scope="markup.comment">
					<regex>{{!(.*?)}}</regex>
				</keywords>
				<keywords id="Handlebars Partials" useforautocomplete="no" scope="keyword.type">
					<regex>{{[>&lt;](.*?)}}</regex>
				</keywords>
				<keywords id="Handlebars Delimiters" useforautocomplete="no" scope="markup.inline.cdata">
					<regex>{{=(.*?)=}}</regex>
				</keywords>
				<keywords id="Handlebars Keywords" useforautocomplete="no" scope="keyword.control">
					<string>else</string>
				</keywords>
				<keywords id="Handlebars Pragmas" useforautocomplete="no" scope="markup.constant.entity">
					<regex>{{%(.*?)}}</regex>
				</keywords>
				<keywords id="Handlebars Frames" useforautocomplete="no" scope="markup.tag.attribute.value">
					<regex>{{@(.*?)}}</regex>
				</keywords>
				<!--
				<keywords id="Double Quoted Strings" type="string" useforautocomplete="no" scope="string.double">
					<regex>(".*?")</regex>
				</keywords>
				<keywords id="Single Quoted Strings" type="string" useforautocomplete="no" scope="string.single">
					<regex>('.*?')</regex>
				</keywords>
				-->
			</state>
			<!-- This is great in theory, but problematic in practice - a valid if/else which could appear as an unclosed HTML tag destroys HTML code folding -->
			<!-- Possible alternative: disable HTML folding, enable the below -->
			<!-- <state id="Handlebars" foldState="Foldable Handlebars" ... -->
			<!--
			<state id="Foldable Handlebars" containerState="yes" delimiterState="Handlebars" foldBegin="\A{{[#\^]\s*?(?'handlebarstagname'\S+)[\s\S]*?}}\Z" foldEnd="{{/\s*?(?#see-insert-start-group:handlebarstagname)\s*?}}" foldable="yes" usespellchecking="yes" scope="markup.processing.languageswitch">
				<import keywords-only="yes" />
				<import />
			</state>
			-->
			<!--  This is the "we do a complete HTML mode and import Handlebars everywhere" section -->
			<state-link mode="XML" state="Comment" />
			<state-link mode="XML" state="CDATA" />
			<state-link mode="XML" state="Doctype" />
			<state-link mode="XML" state="Escape" />
			<state id="Inline CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
				<begin>
					<regex>&lt;[ \t]*(?i)style[^>]*></regex>
					<autoend>&lt;/style></autoend>
				</begin>
				<end>
					<regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*></regex>
				</end>
				<state-link state="Handlebars" />
				<import mode="CSS" />
				<state id="CSSInside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
					<begin>
						<string>{</string>
						<autoend>}</autoend>
					</begin>
					<end>
						<regex>}</regex>
					</end>
					<import mode="CSS" state="Inside curly brackets" keywords-only="yes" />
					<state id="CSS Attribute state" scope="meta.block.attribute">
						<begin>
							<string>:</string>
						</begin>
						<end>
							<regex>(;|.(?=})|[\n\r])</regex>
						</end>
						<import mode="CSS" state="Attribute state" keywords-only="yes" />
						<state-link state="Handlebars" />
						<state-link state="CSSAutodocComment" />
						<state-link state="CSSComment" />
						<state-link state="CSSString" />
						<state-link state="CSSSingleString" />
					</state>
					<state-link state="CSSAutodocComment" />
					<state-link state="CSSComment" />
					<state-link state="CSSString" />
					<state-link state="CSSSingleString" />
					<state-link state="Handlebars" />
				</state>
				<import keywords-only="yes" />
				<state id="CSSRules" scope="style.at-rule">
					<begin>
						<regex>^@[-\w_]+</regex>
					</begin>
					<end>
						<regex>.(?=[{\n\r])</regex>
					</end>
				</state>
				<state id="CSSAutodocComment" type="comment" foldable="yes" scope="style.comment.block.documentation">
					<begin>
						<string>/\*"</string>
						<autoend>"\*/</autoend>
					</begin>
					<end>
						<regex>"\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes" />
					<state-link state="Handlebars" />
				</state>
				<state id="CSSComment" type="comment" foldable="yes" scope="style.comment.block">
					<begin>
						<string>/\*</string>
						<autoend>\*/</autoend>
					</begin>
					<end>
						<regex>\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes" />
					<state-link state="Handlebars" />
				</state>
				<state id="CSSString" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*"</regex>
					</end>
					<state-link state="Handlebars" />
				</state>
				<state id="CSSSingleString" type="string" scope="style.value.string.single">
					<begin>
						<string>'</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*'</regex>
					</end>
					<state-link state="Handlebars" />
				</state>
			</state>
			<state id="Inline JavaScript" delimiterState="Tags" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" scope="meta.block.js">
				<begin>
					<regex>(?:&lt;[ \t]*(?i)script\s*?>)|(?:&lt;[ \t]*(?i)script.+?javascript.*?>)</regex>
					<autoend>&lt;/script></autoend>
				</begin>
				<end>
					<regex>&lt;(?i)/script[^>]*></regex>
				</end>
				<import mode="JavaScript" keywords-only="yes" />
				<state-link state="Handlebars" />
				<state id="JSAutodocComment" type="comment" foldable="yes" scope="comment.block.documentation.js">
					<begin><regex>/\*"</regex></begin>
					<end><regex>"\*/</regex></end>
					<state-link state="Handlebars" />
				</state>
				<state id="JSComment" type="comment" foldable="yes" scope="comment.block.js">
					<begin><regex>/\*</regex><autoend>\*/</autoend></begin>
					<end><regex>\*/</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes" />
					<state-link state="Handlebars" />
				</state>
				<state id="JSSingleComment" type="comment" scope="comment.line.double-slash.js">
					<begin><regex>//</regex></begin>
					<end><regex>[\n\r]|.(?=&lt;(?i)/script\s*>)</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes" />
					<state-link state="Handlebars" />
				</state>
				<state id="JSRegular Expressions" type="string" scope="string.regexp.js">
					<begin><regex>(?&lt;![&lt;/])/.*?[^\\](?=/[^\n\r]*(?:;|\)|,|[\n\r]))</regex></begin>
					<end><regex>/[cgimosx]*</regex></end>
					<state-link state="Handlebars" />
				</state>
				<state id="JSString" type="string" scope="string.double.js">
					<begin><regex>"</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
					<state-link state="Handlebars" />
				</state>
				<state id="JSSingleString" type="string" scope="string.single.js">
					<begin><regex>'</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
					<state-link state="Handlebars" />
				</state>
				<state id="JSBlock" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
					<begin><regex>{</regex><autoend>}</autoend></begin>
					<end><regex>}</regex></end>
					<import mode="JavaScript" keywords-only="yes" />
					<import mode="Handlebars" state="Inline JavaScript" />
				</state>
			</state>
			<state id="Self Closing Tags" foldable="no" scope="markup.tag">
				<begin>
					<regex>&lt;[ \t]*(?i)(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)</regex>
				</begin>
				<end>
					<regex>&gt;</regex>
				</end>
				<import state="Tags" />
			</state>
			<state id="Foldable Tags" containerState="yes" delimiterState="Tags" foldBegin="&lt;[ \t]*(?'xmltagstatename'[-:_\.\w\d]+)(?:.|[\r\n])*(?&lt;![/?])>\Z" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*>" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
				<import mode="XML" keywords-only="yes" />
				<import keywords-only="yes" />
				<import />
			</state>
			<state id="Tags" usespellchecking="no" foldState="Foldable Tags" scope="markup.tag">
				<begin>
					<regex>&lt;</regex>
				</begin>
				<end>
					<regex>&gt;</regex>
				</end>
				<state-link state="Handlebars" />
				<state id="Javascript Actions" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.default" >
					<begin>
						<regex>(?&lt;=[ \t])(?i)on[\w]+[ \t]*=[ \t]*"</regex>
					</begin>
					<end>
						<regex>"</regex>
					</end>
					<keywords id="Action Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\A([\w-]+)[ \t]*=</regex>
					</keywords>
					<keywords id="Action Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					<keywords id="Action Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\A(?i)on[\w-]+([ \t]*=[ \t]*)</regex>
					</keywords>
					<import mode="JavaScript" />
				</state>
				<state id="Links" type="url" useforautocomplete="no" scope="meta.link">
					<begin>
						<regex>(?&lt;=[ \t])(?i)(?:href|src)[ \t]*=[ \t]*"</regex>
					</begin>
					<end>
						<regex>"</regex>
					</end>
					<state-link state="Handlebars" />
					<state id="Javascript in Links" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
						<begin>
							<regex>\A[ \t]*(?i)javascript:</regex>
						</begin>
						<end>
							<regex>(?'unwindend'")</regex>
						</end>
						<import mode="JavaScript" />
					</state>
					<keywords id="Link Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\A(\w+)[ \t]*=</regex>
					</keywords>
					<keywords id="Link Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					<keywords id="Link Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\A(?i)\w+([ \t]*=[ \t]*)</regex>
					</keywords>
				</state>
				<state id="Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin>
						<regex>"</regex>
					</begin>
					<end>
						<regex>"</regex>
					</end>
					<state-link state="Handlebars" />
				</state>
				<state id="Single Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin>
						<regex>'</regex>
					</begin>
					<end>
						<regex>'</regex>
					</end>
					<state-link state="Handlebars" />
				</state>
				<keywords id="Attributes in Tags" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=)</regex>
				</keywords>
			</state>
		</default>
	</states>
</syntax>
